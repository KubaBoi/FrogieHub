#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.Password import Password


class PasswordRepositoryImpl:

    @staticmethod
    def init():
        PasswordRepositoryImpl.table = "passwords"
        PasswordRepositoryImpl.scheme = "(id,user_id,password,duration)"
        PasswordRepositoryImpl.schemeNoBrackets = "id,user_id,password,duration"

    @staticmethod
    def convert(var):
        try:
            var = int(var)
        except:
            var = var
        return var

    @staticmethod
    def toJson(object):
        scheme = PasswordRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = Password()
        model.id = PasswordRepositoryImpl.convert(obj[0])
        model.user_id = PasswordRepositoryImpl.convert(obj[1])
        model.password = PasswordRepositoryImpl.convert(obj[2])
        model.duration = PasswordRepositoryImpl.convert(obj[3])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.user_id,
            model.password,
            model.duration
        )
        return tuple

    @staticmethod
    def findValidPassword(args):
        userId = args[0]

        response = None
        try:
            response = Database.query(f"select case when exists (select * from passwords p where p.user_id = {userId}) then cast(1 as bit) else cast(0 as bit) end;")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        if (response[0][0] == "1"): return True
        return False

    @staticmethod
    def findNewId(args):

        response = None
        try:
            response = Database.query(f"select count(*) from passwords;")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        return int(response[0][0])

    @staticmethod
    def save(args):
        obj = PasswordRepositoryImpl.fromModel(args[0])

        try:
            Database.commit(f"insert into {PasswordRepositoryImpl.table} {PasswordRepositoryImpl.scheme} values {obj};")
            Database.done()
            return True
        except Exception as e:
            Logger.fail(str(e))
            return False

    @staticmethod
    def update(args):
        obj = PasswordRepositoryImpl.fromModel(args[0])

        try:
            Database.commit(f"update {PasswordRepositoryImpl.table} set {PasswordRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            Database.done()
            return True
        except Exception as e:
            Logger.fail(str(e))
            return False

    @staticmethod
    def delete(args):
        obj = PasswordRepositoryImpl.fromModel(args[0])

        try:
            Database.commit(f"delete from {PasswordRepositoryImpl.table} where id={obj[0]};")
            Database.done()
            return True
        except Exception as e:
            Logger.fail(str(e))
            return False

