#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.User import User


class UserRepositoryImpl:

    @staticmethod
    def init():
        UserRepositoryImpl.table = "users"
        UserRepositoryImpl.scheme = "(id,user_name,email,picture_id)"
        UserRepositoryImpl.schemeNoBrackets = "id,user_name,email,picture_id"

    @staticmethod
    def convert(var):
        try:
            var = int(var)
        except:
            var = var
        return var

    @staticmethod
    def toJson(object):
        scheme = UserRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = User()
        model.id = UserRepositoryImpl.convert(obj[0])
        model.user_name = UserRepositoryImpl.convert(obj[1])
        model.email = UserRepositoryImpl.convert(obj[2])
        model.picture_id = UserRepositoryImpl.convert(obj[3])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.user_name,
            model.email,
            model.picture_id
        )
        return tuple

    @staticmethod
    def findUserByCredentials(args):
        userName = args[0]
        password = args[1]
        duration = args[2]

        response = None
        try:
            response = Database.query(f"select u.id, u.user_name, u.email, u.picture_id from passwords p inner join users u on u.id = p.user_id where p.password = {password} and p.duration > {duration} and u.user_name = {userName};")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        if (len(response) > 0):
            return UserRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def findUserByName(args):
        userName = args[0]

        response = None
        try:
            response = Database.query(f"select {UserRepositoryImpl.schemeNoBrackets} from users u where u.user_name = {userName};")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        if (len(response) > 0):
            return UserRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def findUserById(args):
        userId = args[0]

        response = None
        try:
            response = Database.query(f"select {UserRepositoryImpl.schemeNoBrackets} from users u where u.id = {userId};")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        if (len(response) > 0):
            return UserRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def validateUserName(args):
        userName = args[0]

        response = None
        try:
            response = Database.query(f"select case when exists (select * from users u where u.user_name = {userName}) then cast(0 as bit) else cast(1 as bit) end;")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        if (response[0][0] == "1"): return True
        return False

    @staticmethod
    def findNewId(args):

        response = None
        try:
            response = Database.query(f"select count(*) from users;")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        return int(response[0][0])

    @staticmethod
    def findUserByIpAndToken(args):
        ip = args[0]
        token = args[1]

        response = None
        try:
            response = Database.query(f"select u.id, u.user_name, u.email, u.picture_id from users u inner join tokens t on t.user_id = u.id where t.token = {token} and t.ip = {ip};")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        if (len(response) > 0):
            return UserRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def findUsersDynamic(args):
        userNameStart = args[0]

        response = None
        try:
            response = Database.query(f"select {UserRepositoryImpl.schemeNoBrackets} from users u where LOWER(u.user_name) like {userNameStart}")
            Database.done()
        except Exception as e:
            Logger.fail(str(e))

        if (response == None): return response
        resp = []
        for a in response:
            resp.append(UserRepositoryImpl.toModel(a))
        return resp

    @staticmethod
    def save(args):
        obj = UserRepositoryImpl.fromModel(args[0])

        try:
            Database.commit(f"insert into {UserRepositoryImpl.table} {UserRepositoryImpl.scheme} values {obj};")
            Database.done()
            return True
        except Exception as e:
            Logger.fail(str(e))
            return False

    @staticmethod
    def update(args):
        obj = UserRepositoryImpl.fromModel(args[0])

        try:
            Database.commit(f"update {UserRepositoryImpl.table} set {UserRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            Database.done()
            return True
        except Exception as e:
            Logger.fail(str(e))
            return False

    @staticmethod
    def delete(args):
        obj = UserRepositoryImpl.fromModel(args[0])

        try:
            Database.commit(f"delete {UserRepositoryImpl.table} set {UserRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            Database.done()
            return True
        except Exception as e:
            Logger.fail(str(e))
            return False

