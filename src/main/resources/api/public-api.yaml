openapi: 3.1.0
info:
  title: SAG API
  version: 0.0.1

security:
  - oauth2jwt: [ ]

components:
  securitySchemes:
    oauth2jwt:
      type: oauth2
      flows:
        password:
          tokenUrl: /auth/login
          scopes:
            admin: Admin role access
            user: Regular user access
            user:owner: Owner of the resource
  schemas:
    ErrorDTO:
      type: object
      properties:
        message:
          type: string

tags:
  - name: Auth
    description: Login for SAS
  - name: Public
    description: Endpoints with limited data
  - name: Accounts
    description: Management of SAS accounts
  - name: Services
    description: Management of SAS services
  - name: Proxy
    description: Proxy endpoint for SAS

paths:

  # Auth

  /auth/login:
    post:
      tags:
        - Auth
      summary: Account login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/login.yaml#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: './components/login.yaml#/components/schemas/LoginResponse'
        '400':
          description: Given login data are wrong or incomplete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '401':
          description: Account is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  # Public

  /accounts/public:
    get:
      tags:
        - Public
      summary: List all accounts with public data
      description: Accessible to all authenticated
      security:
        - oauth2jwt: [ admin, user ]
      responses:
        '200':
          description: List of all accounts with public data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/accounts.yaml#/components/schemas/PublicAccountDTO'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  
  /accounts/{accountId}/public:
    get:
      tags:
        - Public
      summary: Detail of account with public data
      description: Accessible only to all authenticated
      security:
        - oauth2jwt: [ admin, user ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Id of account
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: './components/accounts.yaml#/components/schemas/PublicAccountDTO'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /services/public:
    get:
      tags:
        - Public
      summary: List all services with public data
      description: Accessible to all authenticated
      security:
        - oauth2jwt: [ admin, user ]
      responses:
        '200':
          description: List of all service with public data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/services.yaml#/components/schemas/PublicServiceDTO'

  # Accounts

  /accounts:
    get:
      tags:
        - Accounts
      summary: List all accounts
      description: Accessible only to `admin`
      security:
        - oauth2jwt: [ admin ]
      responses:
        '200':
          description: List of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/accounts.yaml#/components/schemas/AccountDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      tags:
        - Accounts
      summary: Create new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/accounts.yaml#/components/schemas/CreateAccountDTO'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: './components/accounts.yaml#/components/schemas/AccountDTO'
        '400':
          description: Given account data are wrong or incomplete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Detail of account
      description: Accessible only to `admin`, `user:owner`
      security:
        - oauth2jwt: [ admin, user:owner ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Id of account
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: './components/accounts.yaml#/components/schemas/AccountDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    patch:
      tags:
        - Accounts
      summary: Update account
      description: Accessible only to `admin`, `user:owner`
      security:
        - oauth2jwt: [ admin, user:owner ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Id of account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/accounts.yaml#/components/schemas/UpdateAccountDTO'
      responses:
        '200':
          description: Account updated
          content:
            application/json:
              schema:
                $ref: './components/accounts.yaml#/components/schemas/AccountDTO'
        '400':
          description: Given account data are wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '409':
          description: Some unique account data are taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      tags:
        - Accounts
      summary: Delete account
      description: Accessible only to `admin`, `user:owner`
      security:
        - oauth2jwt: [ admin, user:owner ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
          description: Id of account
      responses:
        '204':
          description: Account deleted
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  # Services

  /system/services:
    get:
      tags:
        - Services
      summary: List all services
      description: Accessible only to `admin`
      security:
        - oauth2jwt: [ admin ]
      responses:
        '200':
          description: List of all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/services.yaml#/components/schemas/ServiceDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      tags:
        - Services
      summary: Add new service
      description: Accessible only to `admin`
      security:
        - oauth2jwt: [ admin ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/services.yaml#/components/schemas/CreateServiceDTO'
      responses:
        '201':
          description: Service created
          content:
            application/json:
              schema:
                $ref: './components/services.yaml#/components/schemas/ServiceDTO'
        '400':
          description: Given service data are wrong or incomplete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '409':
          description: Service already with the prefix already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /system/services/{serviceId}:
    get:
      tags:
        - Services
      summary: Detail of one service
      description: Accessible only to `admin`
      security:
        - oauth2jwt: [ admin ]
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: Id of service
      responses:
        '200':
          description: Service found
          content:
            application/json:
              schema:
                $ref: './components/services.yaml#/components/schemas/ServiceDTO'
        '400':
          description: Given service data are wrong or incomplete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    patch:
      tags:
        - Services
      summary: Update service
      description: Accessible only to `admin`
      security:
        - oauth2jwt: [ admin ]
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: Id of service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/services.yaml#/components/schemas/UpdateServiceDTO'
      responses:
        '200':
          description: Service updated
          content:
            application/json:
              schema:
                $ref: './components/services.yaml#/components/schemas/ServiceDTO'
        '400':
          description: Given service data are wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '409':
          description: Some unique data are taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      tags:
        - Services
      summary: Delete service
      description: Accessible only to `admin`
      security:
        - oauth2jwt: [ admin ]
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: Id of service
      responses:
        '204':
          description: Service deleted
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  # Proxy

  /{servicePrefix}/{proxyPath}:
    get:
      tags:
        - Proxy
      summary: Universal service gateway
      description: |
        This endpoint is used as reverse proxy for all requests forwarding to internal services.
        Target service is determined from `servicePrefix`. 
        Authentication is done by JWT if it's present and valid (otherwise the target service 
        see the request as unauthenticated).
        The request is then resend to target service with `proxyPath`.
        
        `This endpoint supports all HTTP methods` (GET, POST, PUT, DELETE, ...)
        
        All responses are defined by target service.

      parameters:
        - name: servicePrefix
          in: path
          required: true
          schema:
            type: string
          description: Prefix identifies target service
        - name: proxyPath
          in: path
          required: true
          schema:
            type: string
          description: Rest of path which will be resend to target service
      requestBody:
        required: false
        content:
          '*/*':
            schema:
              type: string
              description: Body of request which will be resend to target service
      responses:
        '404':
          description: Target service was not found for given `servicePrefix`.